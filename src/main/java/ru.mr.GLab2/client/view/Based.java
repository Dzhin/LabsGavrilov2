package ru.mr.GLab2.client.view;

import ru.mr.GLab2.server.controller.Controller;
import ru.mr.GLab2.server.model.Author;
import ru.mr.GLab2.server.model.Book;
import ru.mr.GLab2.server.model.ComboModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


public class Based extends JFrame {
    private ComboModel model;
    private Controller one;
    private JList booksList;
    private JList authorsList;
    private JButton addBookButton;
    private JButton addAuthorsButton;
    private JPanel mainPanel;
    private DefaultListModel<Author> authorsListModel;
    private DefaultListModel<Book> booksListModel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public Based(ComboModel model, Controller contr) {
        this.model = model;
        this.one = contr;
        authorsListModel = new DefaultListModel<>();
        booksListModel = new DefaultListModel<>();
        authorsList.setModel(authorsListModel);
        booksList.setModel(booksListModel);
        getContentPane().add(mainPanel); //Добавить панель с содержимым на форму
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //При закрытии окна останавливать программу
        pack(); //Подогнать размеры окна под содержимое
        setVisible(true); //показать форму
        addBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new NewBook(one, model, null);
            }
        });
        addAuthorsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new NewAuthor(one, null);
            }
        });
        authorsList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    new ViewOneAuthor(one, model, (Author) authorsList.getSelectedValue());
                    updateAuthors();
                }
            }
        });
        booksList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    new OneOfBook(one, model, (Book) booksList.getSelectedValue());
                    updateBooks();
                }
            }
        });
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                updateAuthors();
                updateBooks();
            }
        });
    }

    public DefaultListModel<Author> getAuthorsListModel() {
        return authorsListModel;
    }

    public void setAuthorsListModel(DefaultListModel<Author> authorsListModel) {
        this.authorsListModel = authorsListModel;
    }

    public DefaultListModel<Book> getBooksListModel() {
        return booksListModel;
    }

    public void setBooksListModel(DefaultListModel<Book> booksListModel) {
        this.booksListModel = booksListModel;
    }

    public void updateAuthors() {
        authorsListModel.removeAllElements();
        model.getAuthors().stream().forEach(authorsListModel::addElement);
        /*
        Set<Author> authors = model.getAuthors();
        for (Author author : authors) {
            authorsListModel.addElement(author);
        }
        validate();
        */
    }

    public void updateBooks() {

        booksListModel.removeAllElements();
        model.getBooks().stream().forEach(booksListModel::addElement);
        /*
        Set<Book> books = model.getAuthors();
        for (Book book : books) {
            booksListModel.addElement(book);
        }
        validate();
        */
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Books");
        mainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addBookButton = new JButton();
        addBookButton.setText("AddBook");
        mainPanel.add(addBookButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addAuthorsButton = new JButton();
        addAuthorsButton.setText("AddAuthors");
        mainPanel.add(addAuthorsButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Authors");
        mainPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        authorsList = new JList();
        scrollPane1.setViewportView(authorsList);
        final JScrollPane scrollPane2 = new JScrollPane();
        mainPanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        booksList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        booksList.setModel(defaultListModel1);
        scrollPane2.setViewportView(booksList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
